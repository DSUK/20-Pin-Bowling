#include "PhysicsDrawer.hpp"

void PhysicsDrawer::drawCylinder(PhysicsDrawable* cylinder) {

	SDL_assert(cylinder->body->getCollisionShape()->getShapeType() == CYLINDER_SHAPE_PROXYTYPE);
	glUniformMatrix3fv(colourMatrix, 1, GL_FALSE, &(cylinder->colour)[0][0]);

	btVector3 half_size = ((btBoxShape*)(cylinder->body)->getCollisionShape())->getHalfExtentsWithoutMargin();
	glm::mat4 bullet_transformation = glm::scale(glm::mat4(1.0), glm::vec3(half_size.x(), half_size.y(), half_size.z()));
	float gl_matrix[16];
	glm::mat4 bullet_matrix;

	btTransform bullet_transform;
	cylinder->body->getMotionState()->getWorldTransform(bullet_transform);
	bullet_transform.getOpenGLMatrix(gl_matrix);
	bullet_matrix = glm::make_mat4(gl_matrix);

	bullet_transformation = bullet_matrix*bullet_transformation;
	glUniformMatrix4fv(modelMatrix, 1, GL_FALSE, &bullet_transformation[0][0]);
	this->cylinder.draw();
}

PhysicsDrawer::~PhysicsDrawer()
{}
